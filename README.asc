= Git Quick Use

這裡的文章，是為了提供使用 git 的人，一個方便查詢「怎麼操作」的地方。
網路上的教學文件很多，也包含像是 http://git-scm.com/book/en/v2[Pro Git] 這樣完整的內容。
因此這裡不打算重新撰寫一本新的 git 書籍，而是以 cook book 的形式來整理一些操作流程，給自己以及其它有一樣需要的人參考。
撰寫上不會以「想好好學習 git 」的人為對象，而是以「覺得很重要，但沒時間學習」的人能方便查詢，安心地直接動手操作為方向。

== 寫在前面（源起）

git 很重要，當看到現在幾乎所有 Open Source 專案都採用 git 管理版本，任誰都能感受到它受歡迎的程度。而另一方面，之前的主流 subversion(svn) 已經越來越少在網路上的專案看到。其實，真的不用特別告訴我 git 很重要。

包含之前待過的公司由 svn 轉換到 git，包含自己嘗試導入個人的程式、筆記管理。深深發覺得 svn 和 git 兩者之間的概念上的不同。既使今天我已經大略讀完 Pro Git 第一版的內容，但仍然在許多時候，不能確定自己的操作是否正確，需要回頭去翻找一下文件才行。 git 有許多很方便的操作，不過對於我這種新手而言，有許多東西需要熟悉或記憶。

使用一些 UI 工作的協助，是一個不錯的主意。當發現自己怎麼也記不住所常用指令的參數名稱、順序時，它提供了一個很方便的介面。點選與拖拉就能完成想作的事情，不過仍有一些決定是要人來作判斷。例如當正要 push 到遠端版本庫時，發現到已經有其它新的版本。這時候要選擇 Merge 還是 Rebase 需要由當下的狀況判斷，並沒有絕對的標準答案。

某天我就遇到了一個狀況，我在發現了遠端資料庫有新版本時選擇了 Rebase 方式，但 Rebase 後發現的衝突狀況，卻一直不知道該如何作排除，一時之間陷入了「接下來不知道如何操作」與「會不會不小心弄壞整個版本庫」的擔憂之中。最後我仍然沒有找到正確的操作方法，改用 Merge 的方式先把眼前的問題解決，好讓接下來的工作能夠繼續進行。

沒有解決問題這件事給我很深的感觸，那種明明有詳細資料，但是時間不允許研究的挫折感，如果手邊有個能夠查詢在這個狀況下，選擇 Rebase 應該如何操作，遇到的問題要怎麼排除的話該有多好。與其等待，不如自己開始寫一點這類的東西，把平常工作中遇到的狀況，加上最後研究出來的操作流程記錄下來，好讓未來的自己以及其它相同需要的人可以查找。