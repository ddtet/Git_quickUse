== 版本衝突

=== 情境

回到家裡，有個好想法浮現，當經過了一連串的實作與送交後，忽然發現遠端版本庫中有公司上傳的版還沒被抓下來。這時候版本不允許被直接送交。你必須作一些決定，來解決這個問題並且保證重要的資料都被留下來。也就是說衝突的兩個版本都需要被留下來。

在 SourceTree 的介面中，可以看到類似下圖的樣子。

image:images/rebase001.png[版本衝突示意圖]

在這種狀況下使用 push 推送版本到遠端，會得到類似下圖的錯誤訊息。

image:images/rebase000.png[版本衝突不允許推送的錯誤訊息]

可以看到由最開始的版本為基礎，在本地端(藍線)和遠端(紅線)各送交了新的分支。在要推送資料到遠端時，SourceTree 會出現錯誤，告訴你現在遠端版本無法直接附加上本地端的新版本。

=== Rebase 版本庫

對於同一個分支，git 傾向多使用 rebase 取代 merge，因為這樣能產生比較清楚的版本演進歷程。以下是它的實現步驟。

.Step 1 確認位於在本地的分支上

進行 rebase 先確定現在的位置是對的，檢查看看自己是不是在正確分支的尾端。在 SourceTree 的表現上，是將版本節點以白點(或說空心點)表示，如下圖就表示現在正處於本地 master 版本的尾端。

image:images/rebase002.png[確認白點位在本地方支的尾端]

[TIP]
不是所有的 rebase 都必須在 master 分支上，所有的分支都可以進行這樣的操作。


.Step 2 選擇工具列上的 Pull 工具，選擇

選擇工具列上上的 **Fetch** 按鈕，選擇 **fetch on all remotes**，按下 **OK**，確認已經抓回遠端完整的版本資訊。如下圖所示：

image:images/rebase003.png[選擇 Fetch > fetch on all remotes > OK]

.Step 3 將 rebase 後的新分支，上傳回遠端版本庫

由下圖可以看到，本地端新增的兩個版本，接續在遠端的版本之後，這樣版本歷程中就不會看到許多 merge 遠端版本的記錄。接著，就可以照著平常 push 到遠端版本庫的作法推送新增的程式碼了。

image:images/rebase004.png[兩個相同起源的分支被合而為一]

可以看到在工具列的按鈕上所顯示的數字，沒有任何需要 Pull 的資料，而 Push 的部分則有兩個版本(本地新土曾的版本)可以推送到遠端。

==== 處理術突

若是沒有修改到相同位置的內容，git 可以將兩個版本的檔案順利合併起來。但如果編輯到相同位置的時候，或是不同的兩個二進位檔案(例如：圖片)都會造成 git 無法合併修改，而必須要由人工來判斷。
如果在進行 rebase 的時候出現底下的訊息，表示修改的內容出現術突，需要人工判定，排除的方式可以是編輯衝突的檔案，或是選擇要使用其它哪一個版本，底下列出這兩種作法的操作流程。


.Step 1 選擇發生衝突的檔案，按右鍵

.Step 2 還擇**編輯**進行版本衝突

.Step 3 進行編輯，將的所有 **>>** 和 **<<** 之類的內容去除，並留下正確的內容

.Step 4 重新送交

.Step 5 繼續 Rebase 的工作
